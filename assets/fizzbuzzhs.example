module Main (main
            ,fizzBuzz
            ,fizzBuzzEng) where

fizzBuzz :: Int -> [String]
fizzBuzz x
 | x <= 0 = error "Invalid range"
 | otherwise = fizzBuzzEng [1..x]

fizzBuzzEng :: [Int] -> [String]
fizzBuzzEng = List.foldr decide []
  where
    decide e acc
      | mod e 3 == 0 && mod e 5 == 0 = "FizzBuzz" : acc
      | mod e 3 == 0 = "Fizz" : acc
      | mod e 5 == 0 = "Buzz" : acc
      | otherwise = show e : acc


main :: IO()
main = mapM_ print $ fizzBuzz 100